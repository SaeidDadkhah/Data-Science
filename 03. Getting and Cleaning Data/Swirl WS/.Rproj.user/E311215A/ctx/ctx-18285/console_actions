{
    "data" : [
        "\nR version 3.3.1 (2016-06-21) -- \"Bug in Your Hair\"\nCopyright (C) 2016 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(\"swirl\")",
        "\n| Hi! Type swirl() when you are ready to begin.\n\n",
        "> ",
        "swirl()",
        "\n| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you\n| are new, call yourself something unique.\n\n",
        "What shall I call you? ",
        "Saeid",
        "\n| Please choose a course, or type 0 to exit swirl.\n",
        "\n1: Getting and Cleaning Data\n2: R Programming\n3: Take me to the swirl course repository!\n\n",
        "Selection: ",
        "1",
        "\n| Please choose a lesson, or type 0 to return to course menu.\n",
        "\n1: Manipulating Data with dplyr\n2: Grouping and Chaining with dplyr\n3: Tidying Data with tidyr\n4: Dates and Times with lubridate\n\n",
        "Selection: ",
        "1",
        "\n| Attempting to load lesson dependencies...\n",
        "\n| This lesson requires the ‘dplyr’ package. Would you like me to install it for you now?\n",
        "\n1: Yes\n2: No\n\n",
        "Selection: ",
        "1",
        "\n| Trying to install package ‘dplyr’ now...\n",
        "also installing the dependencies ‘assertthat’, ‘tibble’, ‘lazyeval’, ‘DBI’, ‘BH’\n\n",
        "package ‘assertthat’ successfully unpacked and MD5 sums checked\npackage ‘tibble’ successfully unpacked and MD5 sums checked\npackage ‘lazyeval’ successfully unpacked and MD5 sums checked\npackage ‘DBI’ successfully unpacked and MD5 sums checked\npackage ‘BH’ successfully unpacked and MD5 sums checked\npackage ‘dplyr’ successfully unpacked and MD5 sums checked\n",
        "\n| Package ‘dplyr’ loaded correctly!\n",
        "\n\r  |                                                                                                         \r  |                                                                                                   |   0%\n",
        "\n| In this lesson, you'll learn how to manipulate data using dplyr. dplyr is a fast and powerful R package\n| written by Hadley Wickham and Romain Francois that provides a consistent and concise grammar for\n| manipulating tabular data.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |==                                                                                                 |   2%",
        "\n| One unique aspect of dplyr is that the same set of tools allow you to work with tabular data from a\n| variety of sources, including data frames, data tables, databases and multidimensional arrays. In this\n| lesson, we'll focus on data frames, but everything you learn will apply equally to other formats.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |===                                                                                                |   3%",
        "\n| As you may know, \"CRAN is a network of ftp and web servers around the world that store identical,\n| up-to-date, versions of code and documentation for R\" (http://cran.rstudio.com/). RStudio maintains one of\n| these so-called 'CRAN mirrors' and they generously make their download logs publicly available\n| (http://cran-logs.rstudio.com/). We'll be working with the log from July 8, 2014, which contains\n| information on roughly 225,000 package downloads.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=====                                                                                              |   5%",
        "\n| I've created a variable called path2csv, which contains the full file path to the dataset. Call read.csv()\n| with two arguments, path2csv and stringsAsFactors = FALSE, and save the result in a new variable called\n| mydf. Check ?read.csv if you need help.\n\n",
        "> ",
        "mydf <- read.csv(path2csv, stringsAsFactors = FALSE)",
        "\n| That's the answer I was looking for.\n",
        "\n\r  |                                                                                                         \r  |=======                                                                                            |   7%",
        "\n| Use dim() to look at the dimensions of mydf.\n\n",
        "> ",
        "dim(mydf)",
        "[1] 225468     11\n",
        "\n| You nailed it! Good job!\n",
        "\n\r  |                                                                                                         \r  |========                                                                                           |   8%",
        "\n| Now use head() to preview the data.\n\n",
        "> ",
        "head(mydf)",
        "  X       date     time   size r_version r_arch      r_os      package version country ip_id\n1 1 2014-07-08 00:54:41  80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2 2 2014-07-08 00:59:53 321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3 3 2014-07-08 00:47:13 748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US     3\n4 4 2014-07-08 00:48:05 606104     3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5 5 2014-07-08 00:46:50  79825     3.0.2 x86_64",
        " linux-gnu       digest   0.6.4      CA     4\n6 6 2014-07-08 00:48:04  77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US     3\n",
        "\n| All that hard work is paying off!\n",
        "\n\r  |                                                                                                         \r  |==========                                                                                         |  10%",
        "\n| The dplyr package was automatically installed (if necessary) and loaded at the beginning of this lesson.\n| Normally, this is something you would have to do on your own. Just to build the habit, type library(dplyr)\n| now to load the package again.\n\n",
        "> ",
        "library(dplyr)",
        "\n| Your dedication is inspiring!\n",
        "\n\r  |                                                                                                         \r  |============                                                                                       |  12%",
        "\n| It's important that you have dplyr version 0.4.0 or later. To confirm this, type packageVersion(\"dplyr\").\n\n",
        "> ",
        "packageVersion(\"dplyr\")",
        "[1] ‘0.5.0’\n",
        "\n| You are amazing!\n",
        "\n\r  |                                                                                                         \r  |=============                                                                                      |  13%",
        "\n| If your dplyr version is not at least 0.4.0, then you should hit the Esc key now, reinstall dplyr, then\n| resume this lesson where you left off.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |===============                                                                                    |  15%",
        "\n| The first step of working with data in dplyr is to load the data into what the package authors call a\n| 'data frame tbl' or 'tbl_df'. Use the following code to create a new tbl_df called cran:\n| \n| cran <- tbl_df(mydf).\n\n",
        "> ",
        "cran <- tbl_df(mydf)",
        "\n| You are amazing!\n",
        "\n\r  |                                                                                                         \r  |================                                                                                   |  17%",
        "\n| To avoid confusion and keep things running smoothly, let's remove the original data frame from your\n| workspace with rm(\"mydf\").\n\n",
        "> ",
        "rm(\"mydf\")",
        "\n| Great job!\n",
        "\n\r  |                                                                                                         \r  |==================                                                                                 |  18%",
        "\n| From ?tbl_df, \"The main advantage to using a tbl_df over a regular data frame is the printing.\" Let's see\n| what is meant by this. Type cran to print our tbl_df to the console.\n\n",
        "> ",
        "tbl_df",
        "function (data) \n{\n    as_data_frame(data)\n}\n<environment: namespace:dplyr>\n",
        "\n| Not exactly. Give it another go. Or, type info() for more options.\n",
        "\n| Type cran to print our tbl_df to the console.\n\n",
        "> ",
        "cran",
        "# A tibble: 225,468 × 11\n       X       date     time    size r_version r_arch      r_os      package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>\n1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US",
        "     3\n4      4 2014-07-08 00:48:05  606104     3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5      5 2014-07-08 00:46:50   79825     3.0.2 x86_64 linux-gnu       digest   0.6.4      CA     4\n6      6 2014-07-08 00:48:04   77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US     3\n7      7 2014-07-08 00:48:35  393754     3.1.0 x86_64 linux-gnu         plyr   1.8.1      US     3\n8      8 2014-07-08 00:47:30   28216     3.0.2 x86_64 linux-gnu      whisker   0.3-2      US     5\n9      9 2014-07-08",
        " 00:54:58    5928      <NA>   <NA>      <NA>         Rcpp  0.10.4      CN     6\n10    10 2014-07-08 00:15:35 2206029     3.0.2 x86_64 linux-gnu     hflights     0.1      US     7\n# ... with 225,458 more rows\n",
        "\n| Great job!\n",
        "\n\r  |                                                                                                         \r  |====================                                                                               |  20%",
        "\n| This output is much more informative and compact than what we would get if we printed the original data\n| frame (mydf) to the console.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=====================                                                                              |  22%",
        "\n| First, we are shown the class and dimensions of the dataset. Just below that, we get a preview of the\n| data. Instead of attempting to print the entire dataset, dplyr just shows us the first 10 rows of data and\n| only as many columns as fit neatly in our console. At the bottom, we see the names and classes for any\n| variables that didn't fit on our screen.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=======================                                                                            |  23%",
        "\n| According to the \"Introduction to dplyr\" vignette written by the package authors, \"The dplyr philosophy is\n| to have small functions that each do one thing well.\" Specifically, dplyr supplies five 'verbs' that cover\n| most fundamental data manipulation tasks: select(), filter(), arrange(), mutate(), and summarize().\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=========================                                                                          |  25%",
        "\n| Use ?select to pull up the documentation for the first these core functions.\n\n",
        "> ",
        "?select",
        "\n| That's a job well done!\n",
        "\n\r  |                                                                                                         \r  |==========================                                                                         |  27%",
        "\n| Help files for the other functions are accessible in the same way.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |============================                                                                       |  28%",
        "\n| As may often be the case, particularly with larger datasets, we are only interested in some of the\n| variables. Use select(cran, ip_id, package, country) to select only the ip_id, package, and country\n| variables from the cran dataset.\n\n",
        "> ",
        "select(cran, ip_id, package, country)",
        "# A tibble: 225,468 × 3\n   ip_id      package country\n   <int>        <chr>   <chr>\n1      1    htmltools      US\n2      2      tseries      US\n3      3        party      US\n4      3        Hmisc      US\n5      4       digest      CA\n6      3 randomForest      US\n7      3         plyr      US\n8      5      whisker      US\n9      6         Rcpp      CN\n10     7     hflights      US\n# ... with 225,458 more rows\n",
        "\n| Excellent job!\n",
        "\n\r  |                                                                                                         \r  |==============================                                                                     |  30%",
        "\n| The first thing to notice is that we don't have to type cran$ip_id, cran$package, and cran$country, as we\n| normally would when referring to columns of a data frame. The select() function knows we are referring to\n| columns of the cran dataset.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |===============================                                                                    |  32%",
        "\n| Also, note that the columns are returned to us in the order we specified, even though ip_id is the\n| rightmost column in the original dataset.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=================================                                                                  |  33%",
        "\n| Recall that in R, the `:` operator provides a compact notation for creating a sequence of numbers. For\n| example, try 5:20.\n\n",
        "> ",
        "",
        "> ",
        "5:20",
        " [1]  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n",
        "\n| You are really on a roll!\n",
        "\n\r  |                                                                                                         \r  |===================================                                                                |  35%",
        "\n| Normally, this notation is reserved for numbers, but select() allows you to specify a sequence of columns\n| this way, which can save a bunch of typing. Use select(cran, r_arch:country) to select all columns\n| starting from r_arch and ending with country.\n\n",
        "> ",
        "select(cran, r_arch:country)",
        "# A tibble: 225,468 × 5\n   r_arch      r_os      package version country\n    <chr>     <chr>        <chr>   <chr>   <chr>\n1  x86_64   mingw32    htmltools   0.2.4      US\n2  x86_64   mingw32      tseries 0.10-32      US\n3  x86_64 linux-gnu        party  1.0-15      US\n4  x86_64 linux-gnu        Hmisc  3.14-4      US\n5  x86_64 linux-gnu       digest   0.6.4      CA\n6  x86_64 linux-gnu randomForest   4.6-7      US\n7  x86_64 linux-gnu         plyr   1.8.1      US\n8  x86_64 linux-gnu      whisker   0.3-2      US",
        "\n9    <NA>      <NA>         Rcpp  0.10.4      CN\n10 x86_64 linux-gnu     hflights     0.1      US\n# ... with 225,458 more rows\n",
        "\n| Perseverance, that's the answer.\n",
        "\n\r  |                                                                                                         \r  |====================================                                                               |  37%",
        "\n| We can also select the same columns in reverse order. Give it a try.\n\n",
        "> ",
        "\n",
        "> ",
        "play()",
        "\n| Entering play mode. Experiment as you please, then type nxt() when you are ready to resume the lesson.\n\n",
        "> ",
        "nxt()",
        "\n| Resuming lesson...\n",
        "\n",
        "\n| We can also select the same columns in reverse order. Give it a try.\n\n",
        "> ",
        "select(cran, country:r_arch)",
        "# A tibble: 225,468 × 5\n   country version      package      r_os r_arch\n     <chr>   <chr>        <chr>     <chr>  <chr>\n1       US   0.2.4    htmltools   mingw32 x86_64\n2       US 0.10-32      tseries   mingw32 x86_64\n3       US  1.0-15        party linux-gnu x86_64\n4       US  3.14-4        Hmisc linux-gnu x86_64\n5       CA   0.6.4       digest linux-gnu x86_64\n6       US   4.6-7 randomForest linux-gnu x86_64\n7       US   1.8.1         plyr linux-gnu x86_64\n8       US   0.3-2      whisker linux-gnu x86_64",
        "\n9       CN  0.10.4         Rcpp      <NA>   <NA>\n10      US     0.1     hflights linux-gnu x86_64\n# ... with 225,458 more rows\n",
        "\n| Nice work!\n",
        "\n\r  |                                                                                                         \r  |======================================                                                             |  38%",
        "\n| Print the entire dataset again, just to remind yourself of what it looks like. You can do this at anytime\n| during the lesson.\n\n",
        "> ",
        "cran",
        "# A tibble: 225,468 × 11\n       X       date     time    size r_version r_arch      r_os      package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>\n1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US",
        "     3\n4      4 2014-07-08 00:48:05  606104     3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5      5 2014-07-08 00:46:50   79825     3.0.2 x86_64 linux-gnu       digest   0.6.4      CA     4\n6      6 2014-07-08 00:48:04   77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US     3\n7      7 2014-07-08 00:48:35  393754     3.1.0 x86_64 linux-gnu         plyr   1.8.1      US     3\n8      8 2014-07-08 00:47:30   28216     3.0.2 x86_64 linux-gnu      whisker   0.3-2      US     5\n9      9 2014-07-08",
        " 00:54:58    5928      <NA>   <NA>      <NA>         Rcpp  0.10.4      CN     6\n10    10 2014-07-08 00:15:35 2206029     3.0.2 x86_64 linux-gnu     hflights     0.1      US     7\n# ... with 225,458 more rows\n",
        "\n| That's correct!\n",
        "\n\r  |                                                                                                         \r  |========================================                                                           |  40%",
        "\n| Instead of specifying the columns we want to keep, we can also specify the columns we want to throw away.\n| To see how this works, do select(cran, -time) to omit the time column.\n\n",
        "> ",
        "select(cran, -time)",
        "# A tibble: 225,468 × 10\n       X       date    size r_version r_arch      r_os      package version country ip_id\n   <int>      <chr>   <int>     <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>\n1      1 2014-07-08   80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2      2 2014-07-08  321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3      3 2014-07-08  748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US     3\n4      4 2014-07-08  606104     3.1.0",
        " x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5      5 2014-07-08   79825     3.0.2 x86_64 linux-gnu       digest   0.6.4      CA     4\n6      6 2014-07-08   77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US     3\n7      7 2014-07-08  393754     3.1.0 x86_64 linux-gnu         plyr   1.8.1      US     3\n8      8 2014-07-08   28216     3.0.2 x86_64 linux-gnu      whisker   0.3-2      US     5\n9      9 2014-07-08    5928      <NA>   <NA>      <NA>         Rcpp  0.10.4      CN     6\n10    10 2014-07-08",
        " 2206029     3.0.2 x86_64 linux-gnu     hflights     0.1      US     7\n# ... with 225,458 more rows\n",
        "\n| All that practice is paying off!\n",
        "\n\r  |                                                                                                         \r  |=========================================                                                          |  42%",
        "\n| The negative sign in front of time tells select() that we DON'T want the time column. Now, let's combine\n| strategies to omit all columns from X through size (X:size). To see how this might work, let's look at a\n| numerical example with -5:20.\n\n",
        "> ",
        "-5:20",
        " [1] -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n",
        "\n| That's a job well done!\n",
        "\n\r  |                                                                                                         \r  |===========================================                                                        |  43%",
        "\n| Oops! That gaves us a vector of numbers from -5 through 20, which is not what we want. Instead, we want to\n| negate the entire sequence of numbers from 5 through 20, so that we get -5, -6, -7, ... , -18, -19, -20.\n| Try the same thing, except surround 5:20 with parentheses so that R knows we want it to first come up with\n| the sequence of numbers, then apply the negative sign to the whole thing.\n\n",
        "> ",
        "-(5:20)",
        " [1]  -5  -6  -7  -8  -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20\n",
        "\n| Keep up the great work!\n",
        "\n\r  |                                                                                                         \r  |=============================================                                                      |  45%",
        "\n| Use this knowledge to omit all columns X:size using select().\n\n",
        "> ",
        "select(cran, -(x:size))",
        "Error in eval(expr, envir, enclos) : object 'x' not found\n",
        "> ",
        "select(cran, -(X:size))",
        "# A tibble: 225,468 × 7\n   r_version r_arch      r_os      package version country ip_id\n       <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>\n1      3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2      3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3      3.1.0 x86_64 linux-gnu        party  1.0-15      US     3\n4      3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5      3.0.2 x86_64 linux-gnu       digest   0.6.4      CA     4\n6      3.1.0 x86_64 linux-gnu randomForest",
        "   4.6-7      US     3\n7      3.1.0 x86_64 linux-gnu         plyr   1.8.1      US     3\n8      3.0.2 x86_64 linux-gnu      whisker   0.3-2      US     5\n9       <NA>   <NA>      <NA>         Rcpp  0.10.4      CN     6\n10     3.0.2 x86_64 linux-gnu     hflights     0.1      US     7\n# ... with 225,458 more rows\n",
        "\n| Excellent job!\n",
        "\n\r  |                                                                                                         \r  |==============================================                                                     |  47%",
        "\n| Now that you know how to select a subset of columns using select(), a natural next question is \"How do I\n| select a subset of rows?\" That's where the filter() function comes in.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |================================================                                                   |  48%",
        "\n| Use filter(cran, package == \"swirl\") to select all rows for which the package variable is equal to\n| \"swirl\". Be sure to use two equals signs side-by-side!\n\n",
        "> ",
        "filter(cra, package == \"swirl\")",
        "Error in filter_(.data, .dots = lazyeval::lazy_dots(...)) : \n  object 'cra' not found\n",
        "> ",
        "filter(cran, package == \"swirl\")",
        "# A tibble: 820 × 11\n       X       date     time   size r_version r_arch         r_os package version country ip_id\n   <int>      <chr>    <chr>  <int>     <chr>  <chr>        <chr>   <chr>   <chr>   <chr> <int>\n1     27 2014-07-08 00:17:16 105350     3.0.2 x86_64      mingw32   swirl   2.2.9      US    20\n2    156 2014-07-08 00:22:53  41261     3.1.0 x86_64    linux-gnu   swirl   2.2.9      US    66\n3    358 2014-07-08 00:13:42 105335    2.15.2 x86_64      mingw32   swirl   2.2.9      CA   115\n4    593 2014-07-08",
        " 00:59:45 105465     3.1.0 x86_64 darwin13.1.0   swirl   2.2.9      MX   162\n5    831 2014-07-08 00:55:27 105335     3.0.3 x86_64      mingw32   swirl   2.2.9      US    57\n6    997 2014-07-08 00:33:06  41261     3.1.0 x86_64      mingw32   swirl   2.2.9      US    70\n7   1023 2014-07-08 00:35:36 106393     3.1.0 x86_64      mingw32   swirl   2.2.9      BR   248\n8   1144 2014-07-08 00:00:39 106534     3.0.2 x86_64    linux-gnu   swirl   2.2.9      US   261\n9   1402 2014-07-08 00:41:41  41261     3.1.0   i386",
        "      mingw32   swirl   2.2.9      US   234\n10  1424 2014-07-08 00:44:49 106393     3.1.0 x86_64    linux-gnu   swirl   2.2.9      US   301\n# ... with 810 more rows\n",
        "\n| You are really on a roll!\n",
        "\n\r  |                                                                                                         \r  |==================================================                                                 |  50%",
        "\n| Again, note that filter() recognizes 'package' as a column of cran, without you having to explicitly\n| specify cran$package.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |===================================================                                                |  52%",
        "\n| The == operator asks whether the thing on the left is equal to the thing on the right. If yes, then it\n| returns TRUE. If no, then FALSE. In this case, package is an entire vector (column) of values, so package\n| == \"swirl\" returns a vector of TRUEs and FALSEs. filter() then returns only the rows of cran corresponding\n| to the TRUEs.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=====================================================                                              |  53%",
        "\n| You can specify as many conditions as you want, separated by commas. For example filter(cran, r_version ==\n| \"3.1.1\", country == \"US\") will return all rows of cran corresponding to downloads from users in the US\n| running R version 3.1.1. Try it out.\n\n",
        "> ",
        "filter(cran, r_version == \"3.1.1\", country = \"US\")",
        "Error: filter() takes unnamed arguments. Do you need `==`?\n",
        "> ",
        "filter(cran, r_version == \"3.1.1\", country == \"US\")",
        "# A tibble: 1,588 × 11\n       X       date     time    size r_version r_arch         r_os      package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>        <chr>        <chr>   <chr>   <chr> <int>\n1   2216 2014-07-08 00:48:58  385112     3.1.1 x86_64 darwin13.1.0   colorspace   1.2-4      US   191\n2  17332 2014-07-08 03:39:57  197459     3.1.1 x86_64 darwin13.1.0         httr     0.3      US  1704\n3  17465 2014-07-08 03:25:38   23259     3.1.1 x86_64 darwin13.1.0         snow  0.3-13",
        "      US    62\n4  18844 2014-07-08 03:59:17  190594     3.1.1 x86_64 darwin13.1.0       maxLik   1.2-0      US  1533\n5  30182 2014-07-08 04:13:15   77683     3.1.1   i386      mingw32 randomForest   4.6-7      US   646\n6  30193 2014-07-08 04:06:26 2351969     3.1.1   i386      mingw32      ggplot2   1.0.0      US     8\n7  30195 2014-07-08 04:07:09  299080     3.1.1   i386      mingw32    fExtremes 3010.81      US  2010\n8  30217 2014-07-08 04:32:04  568036     3.1.1   i386      mingw32        rJava   0.9-6      US",
        "    98\n9  30245 2014-07-08 04:10:41  526858     3.1.1   i386      mingw32         LPCM  0.44-8      US     8\n10 30354 2014-07-08 04:32:51 1763717     3.1.1   i386      mingw32         mgcv   1.8-1      US  2122\n# ... with 1,578 more rows\n",
        "\n| Great job!\n",
        "\n\r  |                                                                                                         \r  |======================================================                                             |  55%",
        "\n| The conditions passed to filter() can make use of any of the standard comparison operators. Pull up the\n| relevant documentation with ?Comparison (that's an uppercase C).\n\n",
        "> ",
        "?Comparison",
        "\n| That's the answer I was looking for.\n",
        "\n\r  |                                                                                                         \r  |========================================================                                           |  57%",
        "\n| Edit your previous call to filter() to instead return rows corresponding to users in \"IN\" (India) running an R version that is\n| less than or equal to \"3.0.2\". The up arrow on your keyboard may come in handy here. Don't forget your double quotes!\n\n",
        "> ",
        "filter(cran, r_version <= \"3.0.2\", country == \"IN\")",
        "# A tibble: 4,139 × 11\n       X       date     time     size r_version r_arch      r_os       package   version country ip_id\n   <int>      <chr>    <chr>    <int>     <chr>  <chr>     <chr>         <chr>     <chr>   <chr> <int>\n1    348 2014-07-08 00:44:04 10218907     3.0.0 x86_64   mingw32            BH  1.54.0-2      IN   112\n2   9990 2014-07-08 02:11:32   397497     3.0.2 x86_64 linux-gnu     equateIRT       1.1      IN  1054\n3   9991 2014-07-08 02:11:32   119199     3.0.2 x86_64 linux-gnu      ggdendro",
        "    0.1-14      IN  1054\n4   9992 2014-07-08 02:11:33    81779     3.0.2 x86_64 linux-gnu         dfcrm     0.2-2      IN  1054\n5  10022 2014-07-08 02:19:45  1557078    2.15.0 x86_64   mingw32 RcppArmadillo 0.4.320.0      IN  1060\n6  10023 2014-07-08 02:19:46  1184285    2.15.1   i686 linux-gnu      forecast       5.4      IN  1060\n7  10189 2014-07-08 02:38:06   908854     3.0.2 x86_64 linux-gnu     editrules     2.7.2      IN  1054\n8  10199 2014-07-08 02:38:28   178436     3.0.2 x86_64 linux-gnu        energy",
        "     1.6.1      IN  1054\n9  10200 2014-07-08 02:38:29    51811     3.0.2 x86_64 linux-gnu        ENmisc     1.2-7      IN  1054\n10 10201 2014-07-08 02:38:29    65245     3.0.2 x86_64 linux-gnu       entropy     1.2.0      IN  1054\n# ... with 4,129 more rows\n",
        "\n| Great job!\n",
        "\n\r  |                                                                                                         \r  |==========================================================                                         |  58%",
        "\n| Our last two calls to filter() requested all rows for which some condition AND another condition were TRUE. We can also\n| request rows for which EITHER one condition OR another condition are TRUE. For example, filter(cran, country == \"US\" | country\n| == \"IN\") will gives us all rows for which the country variable equals either \"US\" or \"IN\". Give it a go.\n\n",
        "> ",
        "filter(cran, r_version <= \"3.0.2\", country == \"IN\" | country == \"US\")",
        "# A tibble: 28,780 × 11\n       X       date     time    size r_version r_arch      r_os   package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>     <chr>   <chr>   <chr> <int>\n1      8 2014-07-08 00:47:30   28216     3.0.2 x86_64 linux-gnu   whisker   0.3-2      US     5\n2     10 2014-07-08 00:15:35 2206029     3.0.2 x86_64 linux-gnu  hflights     0.1      US     7\n3     11 2014-07-08 00:15:25  526858     3.0.2 x86_64 linux-gnu      LPCM  0.44-8      US     8\n4     12",
        " 2014-07-08 00:14:45 2351969    2.14.1 x86_64 linux-gnu   ggplot2   1.0.0      US     8\n5     13 2014-07-08 00:15:13 2351966    2.12.2   i386   mingw32   ggplot2   1.0.0      US     9\n6     21 2014-07-08 00:26:44  535895     3.0.2 x86_64 linux-gnu     RWeka  0.4-23      US    15\n7     22 2014-07-08 00:27:06  289972     3.0.2 x86_64 linux-gnu iterators   1.0.7      US    16\n8     23 2014-07-08 00:27:09  609010     3.0.2 x86_64 linux-gnu   SparseM    1.03      US    16\n9     27 2014-07-08 00:17:16  105350     3.0.2",
        " x86_64   mingw32     swirl   2.2.9      US    20\n10    33 2014-07-08 00:03:12  526859     3.0.2 x86_64 linux-gnu      LPCM  0.44-8      US     8\n# ... with 28,770 more rows\n",
        "\n| You're close...I can feel it! Try it again. Or, type info() for more options.\n",
        "\n| filter(cran, country == \"US\" | country == \"IN\") will return all rows for which country equals \"US\" or \"IN\". The `|` symbol\n| (called a pipe operator) probably shares a key with the backslash on your keyboard.\n\n",
        "> ",
        "filter(cran,  country == \"IN\" | country == \"US\")",
        "# A tibble: 95,283 × 11\n       X       date     time    size r_version r_arch      r_os      package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>\n1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US",
        "     3\n4      4 2014-07-08 00:48:05  606104     3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5      6 2014-07-08 00:48:04   77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US     3\n6      7 2014-07-08 00:48:35  393754     3.1.0 x86_64 linux-gnu         plyr   1.8.1      US     3\n7      8 2014-07-08 00:47:30   28216     3.0.2 x86_64 linux-gnu      whisker   0.3-2      US     5\n8     10 2014-07-08 00:15:35 2206029     3.0.2 x86_64 linux-gnu     hflights     0.1      US     7\n9     11 2014-07-08",
        " 00:15:25  526858     3.0.2 x86_64 linux-gnu         LPCM  0.44-8      US     8\n10    12 2014-07-08 00:14:45 2351969    2.14.1 x86_64 linux-gnu      ggplot2   1.0.0      US     8\n# ... with 95,273 more rows\n",
        "\n| Excellent work!\n",
        "\n\r  |                                                                                                         \r  |===========================================================                                        |  60%",
        "\n| Now, use filter() to fetch all rows for which size is strictly greater than (>) 100500 (no quotes, since size is numeric) AND\n| r_os equals \"linux-gnu\". Hint: You are passing three arguments to filter(): the name of the dataset, the first condition, and\n| the second condition.\n\n",
        "> ",
        "filter(cran, size > 100500, r_os == \"linux-gnu\")",
        "# A tibble: 33,683 × 11\n       X       date     time    size r_version r_arch      r_os  package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>    <chr>   <chr>   <chr> <int>\n1      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu    party  1.0-15      US     3\n2      4 2014-07-08 00:48:05  606104     3.1.0 x86_64 linux-gnu    Hmisc  3.14-4      US     3\n3      7 2014-07-08 00:48:35  393754     3.1.0 x86_64 linux-gnu     plyr   1.8.1      US     3\n4     10 2014-07-08",
        " 00:15:35 2206029     3.0.2 x86_64 linux-gnu hflights     0.1      US     7\n5     11 2014-07-08 00:15:25  526858     3.0.2 x86_64 linux-gnu     LPCM  0.44-8      US     8\n6     12 2014-07-08 00:14:45 2351969    2.14.1 x86_64 linux-gnu  ggplot2   1.0.0      US     8\n7     14 2014-07-08 00:15:35 3097729     3.0.2 x86_64 linux-gnu     Rcpp   0.9.7      VE    10\n8     15 2014-07-08 00:14:37  568036     3.1.0 x86_64 linux-gnu    rJava   0.9-6      US    11\n9     16 2014-07-08 00:15:50 1600441     3.1.0 x86_64 linux-gnu",
        "  RSQLite  0.11.4      US     7\n10    18 2014-07-08 00:26:59  186685     3.1.0 x86_64 linux-gnu    ipred   0.9-3      DE    13\n# ... with 33,673 more rows\n",
        "\n| Keep up the great work!\n",
        "\n\r  |                                                                                                         \r  |=============================================================                                      |  62%",
        "\n| Finally, we want to get only the rows for which the r_version is not missing. R represents missing values with NA and these\n| missing values can be detected using the is.na() function.\n\n",
        "...",
        "filter(cran, !is.na(r_version))",
        "\n\r  |                                                                                                         \r  |===============================================================                                    |  63%",
        "\n| To see how this works, try is.na(c(3, 5, NA, 10)).\n\n",
        "> ",
        "is.na(c(c, 5, NA, 10))",
        "[1] FALSE FALSE  TRUE FALSE\n",
        "\n| That's not exactly what I'm looking for. Try again. Or, type info() for more options.\n",
        "\n| Try is.na(c(3, 5, NA, 10)) to see how is.na() works.\n\n",
        "> ",
        "is.na(c(3, 5, NA, 10))",
        "[1] FALSE FALSE  TRUE FALSE\n",
        "\n| Great job!\n",
        "\n\r  |                                                                                                         \r  |================================================================                                   |  65%",
        "\n| Now, put an exclamation point (!) before is.na() to change all of the TRUEs to FALSEs and all of the FALSEs to TRUEs, thus\n| telling us what is NOT NA: !is.na(c(3, 5, NA, 10)).\n\n",
        "> ",
        "!is.na(c(3, 5, NA, 10))",
        "[1]  TRUE  TRUE FALSE  TRUE\n",
        "\n| You are amazing!\n",
        "\n\r  |                                                                                                         \r  |==================================================================                                 |  67%",
        "\n| Okay, ready to put all of this together? Use filter() to return all rows of cran for which r_version is NOT NA. Hint: You will\n| need to use !is.na() as part of your second argument to filter().\n\n",
        "> ",
        "filter(cran, !is.na(r_versio))",
        "Error: object 'r_versio' not found\n",
        "> ",
        "filter(cran, !is.na(r_version))",
        "# A tibble: 207,205 × 11\n       X       date     time    size r_version r_arch      r_os      package version country ip_id\n   <int>      <chr>    <chr>   <int>     <chr>  <chr>     <chr>        <chr>   <chr>   <chr> <int>\n1      1 2014-07-08 00:54:41   80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US     1\n2      2 2014-07-08 00:59:53  321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US     2\n3      3 2014-07-08 00:47:13  748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US",
        "     3\n4      4 2014-07-08 00:48:05  606104     3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US     3\n5      5 2014-07-08 00:46:50   79825     3.0.2 x86_64 linux-gnu       digest   0.6.4      CA     4\n6      6 2014-07-08 00:48:04   77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US     3\n7      7 2014-07-08 00:48:35  393754     3.1.0 x86_64 linux-gnu         plyr   1.8.1      US     3\n8      8 2014-07-08 00:47:30   28216     3.0.2 x86_64 linux-gnu      whisker   0.3-2      US     5\n9     10 2014-07-08",
        " 00:15:35 2206029     3.0.2 x86_64 linux-gnu     hflights     0.1      US     7\n10    11 2014-07-08 00:15:25  526858     3.0.2 x86_64 linux-gnu         LPCM  0.44-8      US     8\n# ... with 207,195 more rows\n",
        "\n| You are doing so well!\n",
        "\n\r  |                                                                                                         \r  |====================================================================                               |  68%",
        "\n| We've seen how to select a subset of columns and rows from our dataset using select() and filter(), respectively. Inherent in\n| select() was also the ability to arrange our selected columns in any order we please.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=====================================================================                              |  70%",
        "\n| Sometimes we want to order the rows of a dataset according to the values of a particular variable. This is the job of\n| arrange().\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |=======================================================================                            |  72%",
        "\n| To see how arrange() works, let's first take a subset of cran. select() all columns from size through ip_id and store the\n| result in cran2.\n\n",
        "> ",
        "cran2 <- select(cran, ip_id)",
        "\n| Not quite right, but keep trying. Or, type info() for more options.\n",
        "\n| Use select(cran, size:ip_id) to select all columns from size through ip_id. Store the result in cran2.\n\n",
        "> ",
        "cran2 <- select(cran, size:ip_id)",
        "\n| Keep up the great work!\n",
        "\n\r  |                                                                                                         \r  |=========================================================================                          |  73%",
        "\n| Now, to order the ROWS of cran2 so that ip_id is in ascending order (from small to large), type arrange(cran2, ip_id). You may\n| want to make your console wide enough so that you can see ip_id, which is the last column.\n\n",
        "> ",
        "arrange(cran2, ip_id)",
        "# A tibble: 225,468 × 8\n     size r_version r_arch         r_os     package version country ip_id\n    <int>     <chr>  <chr>        <chr>       <chr>   <chr>   <chr> <int>\n1   80589     3.1.0 x86_64      mingw32   htmltools   0.2.4      US     1\n2  180562     3.0.2 x86_64      mingw32        yaml  2.1.13      US     1\n3  190120     3.1.0   i386      mingw32       babel   0.2-6      US     1\n4  321767     3.1.0 x86_64      mingw32     tseries 0.10-32      US     2\n5   52281     3.0.3 x86_64 darwin10.8.0    quadprog",
        "   1.5-5      US     2\n6  876702     3.1.0 x86_64    linux-gnu         zoo  1.7-11      US     2\n7  321764     3.0.2 x86_64    linux-gnu     tseries 0.10-32      US     2\n8  876702     3.1.0 x86_64    linux-gnu         zoo  1.7-11      US     2\n9  321768     3.1.0 x86_64      mingw32     tseries 0.10-32      US     2\n10 784093     3.1.0 x86_64    linux-gnu strucchange   1.5-0      US     2\n# ... with 225,458 more rows\n",
        "\n| Perseverance, that's the answer.\n",
        "\n\r  |                                                                                                         \r  |==========================================================================                         |  75%",
        "\n| To do the same, but in descending order, change the second argument to desc(ip_id), where desc() stands for 'descending'. Go\n| ahead.\n\n",
        "> ",
        "arrange(cran2, desc(ip_id))",
        "# A tibble: 225,468 × 8\n      size r_version r_arch         r_os      package version country ip_id\n     <int>     <chr>  <chr>        <chr>        <chr>   <chr>   <chr> <int>\n1     5933      <NA>   <NA>         <NA>          CPE   1.4.2      CN 13859\n2   569241     3.1.0 x86_64      mingw32 multcompView   0.1-5      US 13858\n3   228444     3.1.0 x86_64      mingw32        tourr   0.5.3      NZ 13857\n4   308962     3.1.0 x86_64 darwin13.1.0          ctv   0.7-9      CN 13856\n5   950964     3.0.3   i386      mingw32",
        "        knitr     1.6      CA 13855\n6    80185     3.0.3   i386      mingw32    htmltools   0.2.4      CA 13855\n7  1431750     3.0.3   i386      mingw32        shiny  0.10.0      CA 13855\n8  2189695     3.1.0 x86_64      mingw32       RMySQL   0.9-3      US 13854\n9  4818024     3.1.0   i386      mingw32       igraph   0.7.1      US 13853\n10  197495     3.1.0 x86_64      mingw32         coda  0.16-1      US 13852\n# ... with 225,458 more rows\n",
        "\n| Your dedication is inspiring!\n",
        "\n\r  |                                                                                                         \r  |============================================================================                       |  77%",
        "\n| We can also arrange the data according to the values of multiple variables. For example, arrange(cran2, package, ip_id) will\n| first arrange by package names (ascending alphabetically), then by ip_id. This means that if there are multiple rows with the\n| same value for package, they will be sorted by ip_id (ascending numerically). Try arrange(cran2, package, ip_id) now.\n\n",
        "> ",
        "arrange(cran2, package, ip_id)",
        "# A tibble: 225,468 × 8\n    size r_version r_arch         r_os package version country ip_id\n   <int>     <chr>  <chr>        <chr>   <chr>   <chr>   <chr> <int>\n1  71677     3.0.3 x86_64 darwin10.8.0      A3   0.9.2      CN  1003\n2  71672     3.1.0 x86_64    linux-gnu      A3   0.9.2      US  1015\n3  71677     3.1.0 x86_64      mingw32      A3   0.9.2      IN  1054\n4  70438     3.0.1 x86_64 darwin10.8.0      A3   0.9.2      CN  1513\n5  71677      <NA>   <NA>         <NA>      A3   0.9.2      BR  1526\n6  71892",
        "     3.0.2 x86_64    linux-gnu      A3   0.9.2      IN  1542\n7  71677     3.1.0 x86_64    linux-gnu      A3   0.9.2      ZA  2925\n8  71672     3.1.0 x86_64      mingw32      A3   0.9.2      IL  3889\n9  71677     3.0.3 x86_64      mingw32      A3   0.9.2      DE  3917\n10 71672     3.1.0 x86_64      mingw32      A3   0.9.2      US  4219\n# ... with 225,458 more rows\n",
        "\n| Perseverance, that's the answer.\n",
        "\n\r  |                                                                                                         \r  |==============================================================================                     |  78%",
        "\n| Arrange cran2 by the following three variables, in this order: country (ascending), r_version (descending), and ip_id\n| (ascending).\n\n",
        "> ",
        "arrange(cran2, country, desc(r_version), ip_id)",
        "# A tibble: 225,468 × 8\n      size r_version r_arch      r_os       package   version country ip_id\n     <int>     <chr>  <chr>     <chr>         <chr>     <chr>   <chr> <int>\n1  1556858     3.1.1   i386   mingw32 RcppArmadillo 0.4.320.0      A1  2843\n2  1823512     3.1.0 x86_64 linux-gnu          mgcv     1.8-1      A1  2843\n3    15732     3.1.0   i686 linux-gnu          grnn     0.1.0      A1  3146\n4  3014840     3.1.0 x86_64   mingw32          Rcpp    0.11.2      A1  3146\n5   660087     3.1.0   i386   mingw32",
        "           xts     0.9-7      A1  3146\n6   522261     3.1.0   i386   mingw32           FNN       1.1      A1  3146\n7   522263     3.1.0   i386   mingw32           FNN       1.1      A1  3146\n8  1676627     3.1.0 x86_64 linux-gnu         rgeos     0.3-5      A1  3146\n9  2118530     3.1.0 x86_64 linux-gnu     spacetime     1.1-0      A1  3146\n10 2217180     3.1.0 x86_64   mingw32         gstat    1.0-19      A1  3146\n# ... with 225,458 more rows\n",
        "\n| Keep up the great work!\n",
        "\n\r  |                                                                                                         \r  |===============================================================================                    |  80%",
        "\n| To illustrate the next major function in dplyr, let's take another subset of our original data. Use select() to grab 3 columns\n| from cran -- ip_id, package, and size (in that order) -- and store the result in a new variable called cran3.\n\n",
        "> ",
        "cran3 <- select(cran, ip_id, package, size)",
        "\n| All that hard work is paying off!\n",
        "\n\r  |                                                                                                         \r  |=================================================================================                  |  82%",
        "\n| Take a look at cran3 now.\n\n",
        "> ",
        "cran3",
        "# A tibble: 225,468 × 3\n   ip_id      package    size\n   <int>        <chr>   <int>\n1      1    htmltools   80589\n2      2      tseries  321767\n3      3        party  748063\n4      3        Hmisc  606104\n5      4       digest   79825\n6      3 randomForest   77681\n7      3         plyr  393754\n8      5      whisker   28216\n9      6         Rcpp    5928\n10     7     hflights 2206029\n# ... with 225,458 more rows\n",
        "\n| You are quite good my friend!\n",
        "\n\r  |                                                                                                         \r  |==================================================================================                 |  83%",
        "\n| It's common to create a new variable based on the value of one or more variables already in a dataset. The mutate() function\n| does exactly this.\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |====================================================================================               |  85%",
        "\n| The size variable represents the download size in bytes, which are units of computer memory. These days, megabytes (MB) are a\n| more common unit of measurement. One megabyte is equal to 2^20 bytes. That's 2 to the power of 20, which is approximately one\n| million bytes!\n\n",
        "...",
        "",
        "\n\r  |                                                                                                         \r  |======================================================================================             |  87%",
        "\n| We want to add a column called size_mb that contains the download size in megabytes. Here's the code to do it:\n| \n| mutate(cran3, size_mb = size / 2^20)\n\n",
        "> ",
        "mutate(cran3, size_mb = size ? 2^20)",
        "Error: c(\"no documentation of type ‘80589’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘321767’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘748063’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘606104’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘79825’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘77681’ and topic ‘2^20’ (or error in processing help)\", \n\"no documentation of type ‘393754’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘28216’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘5928’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘2206029’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘526858’ and topic ‘2^20’ (or error in processing help)\", \"no documentation of type ‘2351969’ and topic ‘2^20’ (or error in proc\n",
        "In addition: ",
        "Warning message:\n",
        "In if (type == \"package\") package <- topic :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "asd",
        "Error: object 'asd' not found\n",
        "\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        " ",
        "> ",
        ")",
        "Error: unexpected ')' in \")\"\n",
        "> ",
        ":asd",
        "Error: unexpected ':' in \":\"\n",
        "> ",
        "\"asd\"",
        "[1] \"asd\"\n",
        "\n| You almost had it, but not quite. Try again. Or, type info() for more options.\n",
        "\n| mutate(cran3, size_mb = size / 2^20) will add a new column called size_mb that contains the download size in megabytes.\n\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "asd",
        "Error: object 'asd' not found\n",
        "> ",
        "play()",
        "\n",
        "\n| Leaving swirl now. Type swirl() to resume.\n\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        3,
        2,
        0,
        1,
        3,
        3,
        2,
        0,
        1,
        3,
        3,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        2,
        3,
        2,
        3,
        0,
        1,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        2
    ]
}