library(swirl)
swirl()
packageVersion("swirl")
install_from_swirl("Statistical Inference")
swirl()
0.916
0.91666
33/36
deck
52
1/13
2/13/13/13
3/13
info()
1
0
3/13
2/12
2/51
q()
library(swirl)
swilr()
swirl()
.64
.63
.64
mypdf
integrate(mypdf, lower = 0, upper = 1.6)
1.41
sqrt
sqrt(2)
99.7*0.001
0.997*0.001
(1 - 0.985) * (1 - 0.001)
(0.000997) / (0.000997 + 0.014985)
7/
2
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5(edh + edl)
0.5*(edh + edl)
integrate(myfunc, lower = 0, upper = 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
q()
library(swirl)
swirl()
dice_sqr
sum(dice_sqr * pdf())
sum(dice_sqr * dice_fair)
wx2_fair <- sum(dice_sqr * dice_fair)
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matirx(rnorm(1000), 1000), 1, mean))
sd(apply(matrix(rnorm(1000), 1000), 1, mean))
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000), 1000), 1, mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000, 4), 1000), 1, mean))
1/(2 * sqrt(10))
sd(apply(matrix(sample(0:1, 10000, replace = TRUE), 1000), 1, mean))
choose(5, 3) * 0.8^3 * 0.2^2 +
choose(5, 4) * 0.8^4 * 0.2^1 +
choose(5, 5) * 0.8^5 * 0.2^0
pbinom(2, size = 5, prob = 0.8, lower.tail = FALSE)
qnorm(0.1)
0
pnorm(97.5, mean = 3, sd = 2)
qnorm(97.5, mean = 3, sd = 2)
qnorm(.975, mean = 3, sd = 2)
3 + 2 * qnorm(.975)
1.96*2 + 3
qnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200 - 1020) / 50)
pnorm((1200 - 1020) / 50, lower.tail = FALSE)
qnorm(.75, mean = 1020, sd = 50)
.53
.53
ppois(3, lambda = 4 * 2.5)
pbinom(5, size = 1000, prob = 0.01)
ppois(5, lambda = 1000 * 0.01)
coinPlot(10)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + c(-1, 1) * sqrt(0.5*0.5/100)
.6 + c(-1, 1) * sqrt(0.6*0.4/100)
.6 + c(-1, 1) * qnorm(.975) * sqrt(0.6*0.4/100)
binom.test(60, 100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1, 1) * qnorm(.975) * sqrt(lamb / 94.32)
poisson.test(5, 94.32)$conf
q()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1 - g2
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1, 1) * qt(.975, 9) * sd / sqrt(10)
mn + c(-1, 1) * qt(.975, 9) * s / sqrt(10)
t.test(difference)$conf.int
(8 - 1)*(132.86) + (21 - 1)*(127.44)
sp <- (8 - 1)*(132.86) + (21 - 1)*(127.44)
sp <- (8 - 1)*(15.34^2) + (21 - 1)*(18.23^2)
ns <- 8-1+21-1
sp <- sqrt(sp * ns)
sp <- sqrt(sp / ns)
mn + c(-1, 1) * qt(.975) * sp/sqrt(ns)
mn + c(-1, 1) * qt(.975, ns - 1) * sp/sqrt(ns)
132.86 - 127.44 + c(-1, 1) * qt(.975, ns) * sp/sqrt(ns)
132.86 - 127.44 + c(-1, 1) * qt(.975, ns) * sp*sqrt(ns)
132.86 - 127.44 + c(-1, 1) * qt(.975, ns) * sp*sqrt(1/8+1/21)
(9 * var(g1) + 9 * var(g2)) / 18
sp <- sqrt((9 * var(g1) + 9 * var(g2)) / 18)
md + c(-1, 1) * qt(.975, 18) * sp
md + c(-1, 1) * qt(.975, 18) * sp * sqrt(1/5)
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = TRUE)$conf
15.34^2/8 - 18.23^2/21
(15.34^2/8 - 18.23^2/21)^2
num <- (15.34^2/8 - 18.23^2/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^2/8)^2/7 + (18.23^2/21)^2/20
mydf <- num / den
mn + c(-1, 1) * qt(.975, mydf) * sp * sqrt(1/ns)
mn + c(-1, 1) * qt(.975, mydf) * sqrt(15.34^2/8 + 18.21^2/21)
132.86-127.44 + c(-1, 1) * qt(.975, mydf) * sqrt(15.34^2/8 + 18.21^2/21)
132.86-127.44 + c(-1, 1) * qt(.975, mydf) * sqrt(15.34^2/8 + 18.23^2/21)
q()
library(swirl)
swirl()
q()
library(swirl)
swirl()
10 / sqrt(100)
(32 - 30) / (10/sqrt(100))
(32 - 30) / (10/sqrt(16))
15
qt(.95, 15)
dim(fs)
t.test(fs$sheight, fs$fheight, paired = TRUE)
11.7885 * sd(fs$sheight - fs$fheight) / sqrt(1078)
mybin
8
q()
library(swirl)
swirl()
pt(2.5, 15, lower.tail = FALSE)
qnorm(.95)
pnorm(.99)
qnorm(.99)
pnorm(2, lower.tail = FALSE)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size = 8, prob = .5, lower.tail = FALSE)
pbinom(7, prob = .5, lower.tail = TRUE)
pbinom(7, prob = .5, size = 7,  lower.tail = TRUE)
pbinom(7, prob = .5, size = 8, lower.tail = TRUE)
ppois(9, lambda = 5, lower.tail = FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30 + z, mean = 30, lower.tail = FALSE, sd = 1)
pnorm(30+z, mean = 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd=1, lower.tail = FALSE)
pnorm(30+z*2, mean = 32, sd=2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd = 1)$delta
power.t.test(power = .8, n = 26, sd = 1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd = 1, type = "one.sample", alt = "one.sided")$delta
q()
library(swirl)
swirl()
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues, method = "bonferroni") < .5)
sum(p.adjust(pValues, method = "bonferroni") < .05)
sum(p.adjust(pValues, method = "BH") < .05)
tail(trueStatus)
table(pValues2 < .05, trueStatus)
24/5
24/500
table(p.adjust(pValues2, method = "bonferroni"), trueStatus)
table(p.adjust(pValues2, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2, method = "BH") < .05, trueStatus)
q()
library(swirl)
swirl()
(1+2+3+4+5+6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sample(fh, nh*1000, replace = TRUE)
sam <- sample(fh, nh*1000, replace = TRUE)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
apply(Bdata$count - Cdata$count, mean)
apply(Bdata$count - Cdata$count, mean)
apply(Bdata$count - Cdata$count, FUN =  mean)
mean(Bdata$count) - mean(Cdata$count)
63363
+
1
sample(group)
perms <- sapply(1:10000, testStat(BCcounts, sample(group)))
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
q()
