{
    "collab_server" : "",
    "contents" : "## Put comments here that give an overall description of what your\n## functions do\n## These two functions will cache the inverse of a matrix.\n\n## Write a short comment describing this function\n## This function creates a special \"matrix\" object that can cache its inverse.\nmakeCacheMatrix <- function(x = matrix()) {\n    inv <- NULL\n    set <- function(matrix) {\n        x <<- matrix\n        inv <<- NULL\n    }\n    get <- function() x\n    setInverse <- function(inverse) inv <<- inverse\n    getInverse <- function() inv\n    \n    list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)\n}\n\n\n## Write a short comment describing this function\n## This function computes the inverse of the special \"matrix\" returned by\n## makeCacheMatrix above. If the inverse has already been calculated (and the\n## matrix has not changed), then the cachesolve should retrieve the inverse\n## from the cache.\ncacheSolve <- function(x, ...) {\n    ## Return a matrix that is the inverse of 'x'\n    inv <- x$getInverse()\n    if (!is.null(inv)) {\n        message(\"getting cached data!\")\n        return(inv)\n    }\n    matrix <- x$get()\n    inv <- solve(matrix, ...)\n    x$setInverse(inv)\n    inv\n}\n",
    "created" : 1471732686325.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2846429772",
    "id" : "BD6EE3A7",
    "lastKnownWriteTime" : 1471733902,
    "last_content_update" : 1471733902589,
    "path" : "D:/MOOC/Data Science - Johns Hopkins University/02. R Programming/Assignments of Week 03/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}